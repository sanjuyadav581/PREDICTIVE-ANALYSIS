# -*- coding: utf-8 -*-
"""LVADSUSR134_SANJU_YADAV_LAB4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vpRILgCIU7ANZdPQTT9EN0BYbx0nC3KD
"""

import pandas as pd
data = pd.read_csv("/content/social_network.csv")
print(data.info())

data.dropna(inplace=True)
data = pd.get_dummies(data, columns=['account_status'])

# Scale numerical features
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
data[['login_activity', 'posting_activity', 'social_connections']] = scaler.fit_transform(data[['login_activity', 'posting_activity', 'social_connections']])

import seaborn as sns
import matplotlib.pyplot as plt

# Define colors for the box plots
colors = ['blue', 'green', 'orange', 'red']

# Create box plots for numerical features with colors
plt.figure(figsize=(6, 4))
for i, col in enumerate(['login_activity', 'posting_activity', 'social_connections', 'suspicious_activity']):
    plt.subplot(2, 2, i+1)
    sns.boxplot(y=data[col], color=colors[i])
    plt.title(col.capitalize().replace('_', ' '))

plt.tight_layout()
plt.show()

social_network_data = data
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'social_network_data' is your DataFrame containing the social networking data

plt.figure(figsize=(18, 5))
features = ['login_activity', 'posting_activity', 'social_connections']
for i, feature in enumerate(features, 1):
    plt.subplot(1, 3, i)
    sns.histplot(data=social_network_data, x=feature, kde=True)
    plt.title(f'{feature.capitalize()} Distribution')

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Visualize distributions of numerical features
sns.pairplot(data)
plt.show()

# Plot correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# Create new features or transform existing ones
data['login_to_post_ratio'] = data['login_activity'] / data['posting_activity']
data['login_to_connections_ratio'] = data['login_activity'] / data['social_connections']

from sklearn.ensemble import IsolationForest

# Initialize and train Isolation Forest model
model = IsolationForest(contamination=0.05)
model.fit(data[['login_activity', 'posting_activity', 'social_connections']])

# Predict outliers
outliers = model.predict(data[['login_activity', 'posting_activity', 'social_connections']])
data['is_outlier'] = outliers

from sklearn.metrics import classification_report

print(classification_report(data['suspicious_activity'], data['is_outlier']))









